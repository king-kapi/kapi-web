import fs from "fs";

const images = fs.readdirSync("./assets/icons");

let output = "";

for (const imagePath of images) {
  // console.log(image);
  // const contents = fs.readFileSync("./public/icons/" + imagePath).toString()
  //   .replaceAll('fill="white"', 'fill="currentColor"');
  //
  // let names = imagePath.replace(".svg", "").split("_");
  // names = names.map(name => name[0].toUpperCase() + name.substring(1));
  //
  // console.log(create(names.join(""), contents));

  const contents = fs.readFileSync("./assets/icons/" + imagePath).toString()
    .replaceAll('fill="white"', 'fill="currentColor"')
    .replaceAll('stroke="white"', 'stroke="currentColor"');
  const src = "/icons/" + imagePath;
  const key = imagePath.replace('.svg', '');
  const widthMatch = contents.match(/(?<=\bwidth=")[^"]*/gm);
  const heightMatch = contents.match(/(?<=\bheight=")[^"]*/gm);

  if (widthMatch && heightMatch) {
    const width = parseInt(widthMatch[0]);
    const height = parseInt(heightMatch[0]);

    output += `  ${key}: () => (${contents}),\n`;

    // output[key] = {
    //   src,
    //   width,
    //   height
    // }
  }
}

const finalOutput = `
// generated by generate-icons.ts
export const IconSVGs = {
${output}
};

type Icons = keyof typeof IconSVGs;

export default Icons;
`;

if (process.argv[2])
  fs.writeFileSync(process.argv[2], finalOutput);
else
  console.log(finalOutput);